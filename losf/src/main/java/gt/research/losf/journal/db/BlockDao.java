package gt.research.losf.journal.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import gt.research.losf.journal.db.Block;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BLOCK".
*/
public class BlockDao extends AbstractDao<Block, Integer> {

    public static final String TABLENAME = "BLOCK";

    /**
     * Properties of entity Block.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", true, "ID");
        public final static Property Uri = new Property(1, String.class, "uri", false, "URI");
        public final static Property State = new Property(2, String.class, "state", false, "STATE");
        public final static Property Offset = new Property(3, int.class, "offset", false, "OFFSET");
        public final static Property Network = new Property(4, int.class, "network", false, "NETWORK");
        public final static Property End = new Property(5, int.class, "end", false, "END");
        public final static Property Md5 = new Property(6, String.class, "md5", false, "MD5");
    };


    public BlockDao(DaoConfig config) {
        super(config);
    }
    
    public BlockDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BLOCK\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"URI\" TEXT NOT NULL ," + // 1: uri
                "\"STATE\" TEXT NOT NULL ," + // 2: state
                "\"OFFSET\" INTEGER NOT NULL ," + // 3: offset
                "\"NETWORK\" INTEGER NOT NULL ," + // 4: network
                "\"END\" INTEGER NOT NULL ," + // 5: end
                "\"MD5\" TEXT);"); // 6: md5
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_BLOCK_ID ON BLOCK" +
                " (\"ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BLOCK\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Block entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getUri());
        stmt.bindString(3, entity.getState());
        stmt.bindLong(4, entity.getOffset());
        stmt.bindLong(5, entity.getNetwork());
        stmt.bindLong(6, entity.getEnd());
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(7, md5);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Block readEntity(Cursor cursor, int offset) {
        Block entity = new Block( //
            cursor.getInt(offset + 0), // id
            cursor.getString(offset + 1), // uri
            cursor.getString(offset + 2), // state
            cursor.getInt(offset + 3), // offset
            cursor.getInt(offset + 4), // network
            cursor.getInt(offset + 5), // end
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // md5
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Block entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setUri(cursor.getString(offset + 1));
        entity.setState(cursor.getString(offset + 2));
        entity.setOffset(cursor.getInt(offset + 3));
        entity.setNetwork(cursor.getInt(offset + 4));
        entity.setEnd(cursor.getInt(offset + 5));
        entity.setMd5(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(Block entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(Block entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
