package gt.research.losf.journal.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import gt.research.losf.journal.db.File;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FILE".
*/
public class FileDao extends AbstractDao<File, Integer> {

    public static final String TABLENAME = "FILE";

    /**
     * Properties of entity File.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", true, "ID");
        public final static Property File = new Property(1, String.class, "file", false, "FILE");
        public final static Property Url = new Property(2, String.class, "url", false, "URL");
        public final static Property Md5 = new Property(3, String.class, "md5", false, "MD5");
        public final static Property State = new Property(4, int.class, "state", false, "STATE");
        public final static Property Cookie = new Property(5, String.class, "cookie", false, "COOKIE");
        public final static Property Etag = new Property(6, String.class, "etag", false, "ETAG");
    };


    public FileDao(DaoConfig config) {
        super(config);
    }
    
    public FileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILE\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"FILE\" TEXT NOT NULL ," + // 1: file
                "\"URL\" TEXT NOT NULL ," + // 2: url
                "\"MD5\" TEXT NOT NULL ," + // 3: md5
                "\"STATE\" INTEGER NOT NULL ," + // 4: state
                "\"COOKIE\" TEXT," + // 5: cookie
                "\"ETAG\" TEXT);"); // 6: etag
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_FILE_ID ON FILE" +
                " (\"ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, File entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getFile());
        stmt.bindString(3, entity.getUrl());
        stmt.bindString(4, entity.getMd5());
        stmt.bindLong(5, entity.getState());
 
        String cookie = entity.getCookie();
        if (cookie != null) {
            stmt.bindString(6, cookie);
        }
 
        String etag = entity.getEtag();
        if (etag != null) {
            stmt.bindString(7, etag);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public File readEntity(Cursor cursor, int offset) {
        File entity = new File( //
            cursor.getInt(offset + 0), // id
            cursor.getString(offset + 1), // file
            cursor.getString(offset + 2), // url
            cursor.getString(offset + 3), // md5
            cursor.getInt(offset + 4), // state
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cookie
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // etag
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, File entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setFile(cursor.getString(offset + 1));
        entity.setUrl(cursor.getString(offset + 2));
        entity.setMd5(cursor.getString(offset + 3));
        entity.setState(cursor.getInt(offset + 4));
        entity.setCookie(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEtag(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(File entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(File entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
